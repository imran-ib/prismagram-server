### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  UAT: String
  user: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type File {
  encoding: String
  filename: String
  id: ID
  mimetype: String
  path: String
}

input FollowUserInput {
  id: Int!
}

input GetFollowUserInput {
  id: Int!
  page: Int!
}

type GetFollowersPayload {
  TotalPages: Int
  user: [User]
}

type GetFollowingPayload {
  cursor: Int
  user: [User]
}

input GetFollowingUserInput {
  cursor: Int
  id: Int!
}

type HashTag {
  PhotoCount: Int
  Photos(cursor: Int, take: Int): [Photo]
  createdAt: DateTime!
  hashtag: String!
  id: Int!
  updatedAt: DateTime!
}

type Mutation {
  CreateUser(data: UserCreateInput!): User

  """Follow Users"""
  FollowUser(data: FollowUserInput!): User

  """UnFollow Users"""
  UnFollowUser(data: FollowUserInput!): User

  """User can update their Profile"""
  UpdateUsersProfiles(data: UpdateUsersProfile!): User
  UploadPhoto(data: UploadPhotoInput!): Photo
  UserLogin(data: UserLogin!): AuthPayload
}

type Photo {
  caption: String
  createdAt: DateTime!
  file: String
  hashtag: [HashTag]
  id: Int!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

type Query {
  CurrentUser: User
  GetFollowersQuery(data: GetFollowUserInput!): GetFollowersPayload

  """Get The Users Who Are Following Current User"""
  GetFollowingQuery(data: GetFollowingUserInput!): GetFollowingPayload
  GetHashtag(hashtag: String!, page: Int): HashTag
  GetPhoto(id: Int!): Photo

  """Get Users Profile"""
  GetUserProfile(
    """Find User with unique username"""
    username: String!
  ): User
  SearchUser(data: SearchUsersInput!): [User]
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input SearchUsersInput {
  cursor: Int

  """Provide Text To Search Users From Database"""
  term: String!
}

""""""
input UpdateUsersProfile {
  avatar: Upload
  bio: String
  email: String
  firstName: String
  lastName: String
  password: String
  username: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadPhotoInput {
  caption: String
  photo: String!
}

type User {
  FollowersCount: Int
  FollowingCount: Int
  Hashtags: [HashTag]
  ISFollowing: Boolean
  IsMe: Boolean
  Photos: [Photo]
  avatar: String
  bio: String
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: Int!
  lastName: String
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  email: String!
  firstName: String!
  lastName: String
  password: String!
  username: String!
}

"""Login user in with jwt token"""
input UserLogin {
  email: String
  password: String!
  username: String
}

input UserWhereUniqueInput {
  email: String
  id: Int
  username: String
}
